/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, NgModule } from '@angular/core';
import { MatIconRegistry } from '@angular/material/icon';
import { of as observableOf } from 'rxjs';
// tslint:enable:no-any
/**
 * A null icon registry that must be imported to allow disabling of custom
 * icons.
 */
import * as ɵngcc0 from '@angular/core';
var FakeMatIconRegistry = /** @class */ (function () {
    function FakeMatIconRegistry() {
    }
    FakeMatIconRegistry.prototype.addSvgIcon = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconLiteral = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconLiteralInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSet = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetLiteral = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetLiteralInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.registerFontClassAlias = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.classNameForFontAlias = function (alias) {
        return alias;
    };
    FakeMatIconRegistry.prototype.getDefaultFontSetClass = function () {
        return 'material-icons';
    };
    FakeMatIconRegistry.prototype.getSvgIconFromUrl = function () {
        return observableOf(this._generateEmptySvg());
    };
    FakeMatIconRegistry.prototype.getNamedSvgIcon = function () {
        return observableOf(this._generateEmptySvg());
    };
    FakeMatIconRegistry.prototype.setDefaultFontSetClass = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.ngOnDestroy = function () { };
    FakeMatIconRegistry.prototype._generateEmptySvg = function () {
        var emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        emptySvg.classList.add('fake-testing-svg');
        // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.
        emptySvg.setAttribute('fit', '');
        emptySvg.setAttribute('height', '100%');
        emptySvg.setAttribute('width', '100%');
        emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        emptySvg.setAttribute('focusable', 'false');
        return emptySvg;
    };
FakeMatIconRegistry.ɵfac = function FakeMatIconRegistry_Factory(t) { return new (t || FakeMatIconRegistry)(); };
FakeMatIconRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FakeMatIconRegistry, factory: function (t) { return FakeMatIconRegistry.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FakeMatIconRegistry, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return FakeMatIconRegistry;
}());
export { FakeMatIconRegistry };
/** Import this module in tests to install the null icon registry. */
var MatIconTestingModule = /** @class */ (function () {
    function MatIconTestingModule() {
    }
MatIconTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconTestingModule });
MatIconTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconTestingModule_Factory(t) { return new (t || MatIconTestingModule)(); }, providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconTestingModule, [{
        type: NgModule,
        args: [{
                providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }]
            }]
    }], function () { return []; }, null); })();
    return MatIconTestingModule;
}());
export { MatIconTestingModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFrZS1pY29uLXJlZ2lzdHJ5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwvaWNvbi90ZXN0aW5nL2Zha2UtaWNvbi1yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUFhLEVBQUUsSUFBSSxZQUFZLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFNcEQsdUJBQXVCO0FBRXZCOzs7R0FHRzs7QUFDSDtJQUFBO0lBdUVBLENBQUM7SUFyRUMsd0NBQVUsR0FBVjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELCtDQUFpQixHQUFqQjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELG1EQUFxQixHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDBEQUE0QixHQUE1QjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDJDQUFhLEdBQWI7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxrREFBb0IsR0FBcEI7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxzREFBd0IsR0FBeEI7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCw2REFBK0IsR0FBL0I7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxvREFBc0IsR0FBdEI7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxtREFBcUIsR0FBckIsVUFBc0IsS0FBYTtRQUNqQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxvREFBc0IsR0FBdEI7UUFDRSxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFRCwrQ0FBaUIsR0FBakI7UUFDRSxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCw2Q0FBZSxHQUFmO1FBQ0UsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsb0RBQXNCLEdBQXRCO1FBQ0UsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQseUNBQVcsR0FBWCxjQUFnQixDQUFDO0lBRVQsK0NBQWlCLEdBQXpCO1FBQ0UsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNDLGdHQUFnRztRQUNoRyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQyxRQUFRLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4QyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QyxRQUFRLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzlELFFBQVEsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FDSDt1REF2RUMsVUFBVTs7OztnREFDTDtJQXNFTiwwQkFBQztDQUFBLEFBdkVELElBdUVDO1NBdEVZLG1CQUFtQjtBQXdFaEMscUVBQXFFO0FBQ3JFO0lBQUE7SUFJQSxDQUFDO3dEQUpBLFFBQVEsU0FBQztVQUNSLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUMsQ0FBQyxrQkFDdkU7Ozs7OztnREFDUTtJQUNULDJCQUFDO0NBQUEsQUFKRCxJQUlDO1NBRFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0YWJsZSwgTmdNb2R1bGUsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01hdEljb25SZWdpc3RyeX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaWNvbic7XG5pbXBvcnQge09ic2VydmFibGUsIG9mIGFzIG9ic2VydmFibGVPZn0gZnJvbSAncnhqcyc7XG5cbi8vIHRzbGludDpkaXNhYmxlOm5vLWFueSBJbXBvc3NpYmxlIHRvIHRlbGwgcGFyYW0gdHlwZXMuXG50eXBlIFB1YmxpY0FwaTxUPiA9IHtcbiAgW0sgaW4ga2V5b2YgVF06IFRbS10gZXh0ZW5kcyAoLi4ueDogYW55W10pID0+IFQgPyAoLi4ueDogYW55W10pID0+IFB1YmxpY0FwaTxUPiA6IFRbS11cbn07XG4vLyB0c2xpbnQ6ZW5hYmxlOm5vLWFueVxuXG4vKipcbiAqIEEgbnVsbCBpY29uIHJlZ2lzdHJ5IHRoYXQgbXVzdCBiZSBpbXBvcnRlZCB0byBhbGxvdyBkaXNhYmxpbmcgb2YgY3VzdG9tXG4gKiBpY29ucy5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZha2VNYXRJY29uUmVnaXN0cnkgaW1wbGVtZW50cyBQdWJsaWNBcGk8TWF0SWNvblJlZ2lzdHJ5PiwgT25EZXN0cm95IHtcbiAgYWRkU3ZnSWNvbigpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFN2Z0ljb25MaXRlcmFsKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkU3ZnSWNvbkluTmFtZXNwYWNlKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkU3ZnSWNvbkxpdGVyYWxJbk5hbWVzcGFjZSgpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFN2Z0ljb25TZXQoKTogdGhpcyB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRTdmdJY29uU2V0TGl0ZXJhbCgpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFN2Z0ljb25TZXRJbk5hbWVzcGFjZSgpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFN2Z0ljb25TZXRMaXRlcmFsSW5OYW1lc3BhY2UoKTogdGhpcyB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZWdpc3RlckZvbnRDbGFzc0FsaWFzKCk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2xhc3NOYW1lRm9yRm9udEFsaWFzKGFsaWFzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBhbGlhcztcbiAgfVxuXG4gIGdldERlZmF1bHRGb250U2V0Q2xhc3MoKSB7XG4gICAgcmV0dXJuICdtYXRlcmlhbC1pY29ucyc7XG4gIH1cblxuICBnZXRTdmdJY29uRnJvbVVybCgpOiBPYnNlcnZhYmxlPFNWR0VsZW1lbnQ+IHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZU9mKHRoaXMuX2dlbmVyYXRlRW1wdHlTdmcoKSk7XG4gIH1cblxuICBnZXROYW1lZFN2Z0ljb24oKTogT2JzZXJ2YWJsZTxTVkdFbGVtZW50PiB7XG4gICAgcmV0dXJuIG9ic2VydmFibGVPZih0aGlzLl9nZW5lcmF0ZUVtcHR5U3ZnKCkpO1xuICB9XG5cbiAgc2V0RGVmYXVsdEZvbnRTZXRDbGFzcygpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkgeyB9XG5cbiAgcHJpdmF0ZSBfZ2VuZXJhdGVFbXB0eVN2ZygpOiBTVkdFbGVtZW50IHtcbiAgICBjb25zdCBlbXB0eVN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgZW1wdHlTdmcuY2xhc3NMaXN0LmFkZCgnZmFrZS10ZXN0aW5nLXN2ZycpO1xuICAgIC8vIEVtdWxhdGUgcmVhbCBpY29uIGNoYXJhY3RlcmlzdGljcyBmcm9tIGBNYXRJY29uUmVnaXN0cnlgIHNvIHNpemUgcmVtYWlucyBjb25zaXN0ZW50IGluIHRlc3RzLlxuICAgIGVtcHR5U3ZnLnNldEF0dHJpYnV0ZSgnZml0JywgJycpO1xuICAgIGVtcHR5U3ZnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgJzEwMCUnKTtcbiAgICBlbXB0eVN2Zy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzEwMCUnKTtcbiAgICBlbXB0eVN2Zy5zZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpO1xuICAgIGVtcHR5U3ZnLnNldEF0dHJpYnV0ZSgnZm9jdXNhYmxlJywgJ2ZhbHNlJyk7XG4gICAgcmV0dXJuIGVtcHR5U3ZnO1xuICB9XG59XG5cbi8qKiBJbXBvcnQgdGhpcyBtb2R1bGUgaW4gdGVzdHMgdG8gaW5zdGFsbCB0aGUgbnVsbCBpY29uIHJlZ2lzdHJ5LiAqL1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE1hdEljb25SZWdpc3RyeSwgdXNlQ2xhc3M6IEZha2VNYXRJY29uUmVnaXN0cnl9XVxufSlcbmV4cG9ydCBjbGFzcyBNYXRJY29uVGVzdGluZ01vZHVsZSB7XG59XG4iXX0=