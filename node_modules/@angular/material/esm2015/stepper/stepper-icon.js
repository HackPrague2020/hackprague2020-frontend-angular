/**
 * @fileoverview added by tsickle
 * Generated from: src/material/stepper/stepper-icon.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * Template context available to an attached `matStepperIcon`.
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function MatStepperIconContext() { }
if (false) {
    /**
     * Index of the step.
     * @type {?}
     */
    MatStepperIconContext.prototype.index;
    /**
     * Whether the step is currently active.
     * @type {?}
     */
    MatStepperIconContext.prototype.active;
    /**
     * Whether the step is optional.
     * @type {?}
     */
    MatStepperIconContext.prototype.optional;
}
/**
 * Template to be used to override the icons inside the step header.
 */
export class MatStepperIcon {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
MatStepperIcon.ɵfac = function MatStepperIcon_Factory(t) { return new (t || MatStepperIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MatStepperIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatStepperIcon, selectors: [["ng-template", "matStepperIcon", ""]], inputs: { name: ["matStepperIcon", "name"] } });
/** @nocollapse */
MatStepperIcon.ctorParameters = () => [
    { type: TemplateRef }
];
MatStepperIcon.propDecorators = {
    name: [{ type: Input, args: ['matStepperIcon',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepperIcon, [{
        type: Directive,
        args: [{
                selector: 'ng-template[matStepperIcon]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { name: [{
            type: Input,
            args: ['matStepperIcon']
        }] }); })();
if (false) {
    /**
     * Name of the icon to be overridden.
     * @type {?}
     */
    MatStepperIcon.prototype.name;
    /** @type {?} */
    MatStepperIcon.prototype.templateRef;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1pY29uLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwvc3RlcHBlci9zdGVwcGVyLWljb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFJNUQsMkNBT0M7Ozs7OztJQUxDLHNDQUFjOzs7OztJQUVkLHVDQUFnQjs7Ozs7SUFFaEIseUNBQWtCOzs7OztBQVNwQixNQUFNLE9BQU8sY0FBYzs7OztJQUl6QixZQUFtQixXQUErQztRQUEvQyxnQkFBVyxHQUFYLFdBQVcsQ0FBb0M7SUFBRyxDQUFDOzs7Q0FDdkUsMkNBUkEsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSw2QkFBNkIsZUFDeEMscUNBQ0k7OztZQW5CcUIsV0FBVzs7O21CQXFCbEMsS0FBSyxTQUFDLGdCQUFnQjs7Ozs7Ozs7OztvQkFBUTs7Ozs7O0lBQS9CLDhCQUF5Qzs7SUFFN0IscUNBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdGVwU3RhdGV9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcblxuLyoqIFRlbXBsYXRlIGNvbnRleHQgYXZhaWxhYmxlIHRvIGFuIGF0dGFjaGVkIGBtYXRTdGVwcGVySWNvbmAuICovXG5leHBvcnQgaW50ZXJmYWNlIE1hdFN0ZXBwZXJJY29uQ29udGV4dCB7XG4gIC8qKiBJbmRleCBvZiB0aGUgc3RlcC4gKi9cbiAgaW5kZXg6IG51bWJlcjtcbiAgLyoqIFdoZXRoZXIgdGhlIHN0ZXAgaXMgY3VycmVudGx5IGFjdGl2ZS4gKi9cbiAgYWN0aXZlOiBib29sZWFuO1xuICAvKiogV2hldGhlciB0aGUgc3RlcCBpcyBvcHRpb25hbC4gKi9cbiAgb3B0aW9uYWw6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGVtcGxhdGUgdG8gYmUgdXNlZCB0byBvdmVycmlkZSB0aGUgaWNvbnMgaW5zaWRlIHRoZSBzdGVwIGhlYWRlci5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbmctdGVtcGxhdGVbbWF0U3RlcHBlckljb25dJyxcbn0pXG5leHBvcnQgY2xhc3MgTWF0U3RlcHBlckljb24ge1xuICAvKiogTmFtZSBvZiB0aGUgaWNvbiB0byBiZSBvdmVycmlkZGVuLiAqL1xuICBASW5wdXQoJ21hdFN0ZXBwZXJJY29uJykgbmFtZTogU3RlcFN0YXRlO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8TWF0U3RlcHBlckljb25Db250ZXh0Pikge31cbn1cbiJdfQ==