import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { Injectable, Optional } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { LoadingBarState } from './loading-bar.state';
import { Subject, combineLatest } from 'rxjs';
import { switchMap, map, startWith } from 'rxjs/operators';
import { LOADING_BAR_CONFIG } from './loading-bar.config';
import * as i0 from "@angular/core";
import * as i1 from "./loading-bar.config";
import * as ɵngcc0 from '@angular/core';
var LoadingBarService = /** @class */ (function () {
    function LoadingBarService(platformId, config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        this.platformId = platformId;
        this.config = config;
        this.refs = {};
        this.streams$ = new Subject();
        this.value$ = this.streams$.asObservable().pipe(startWith(null), switchMap(function () { return combineLatest.apply(void 0, __spread(Object.keys(_this.refs).map(function (s) { return _this.refs[s].value$; }))); }), map(function (v) { return Math.max.apply(Math, __spread([0], v)); }));
    }
    Object.defineProperty(LoadingBarService.prototype, "progress$", {
        /** @deprecated use `value$` instead. */
        get: function () {
            return this.value$;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.start = function (initialValue) {
        if (initialValue === void 0) { initialValue = 2; }
        this.useRef().start(initialValue);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.set = function (value) {
        this.useRef().set(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.increment = function (value) {
        this.useRef().increment(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.complete = function () {
        this.useRef().complete();
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.stop = function () {
        this.useRef().stop();
    };
    LoadingBarService.prototype.useRef = function (id) {
        if (id === void 0) { id = 'default'; }
        if (!this.refs[id]) {
            this.refs[id] = new LoadingBarState(this.config);
            this.streams$.next();
            if (!isPlatformBrowser(this.platformId)) {
                this.refs[id].disable();
            }
        }
        return this.refs[id];
    };
    LoadingBarService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOADING_BAR_CONFIG,] }] }
    ]; };
    LoadingBarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i1.LOADING_BAR_CONFIG, 8)); }, token: LoadingBarService, providedIn: "root" });
    LoadingBarService = __decorate([ __param(0, Inject(PLATFORM_ID)),
        __param(1, Optional()), __param(1, Inject(LOADING_BAR_CONFIG)),
        __metadata("design:paramtypes", [Object, Object])
    ], LoadingBarService);
LoadingBarService.ɵfac = function LoadingBarService_Factory(t) { return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LOADING_BAR_CONFIG, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LOADING_BAR_CONFIG]
            }] }]; }, null); })();
    return LoadingBarService;
}());
export { LoadingBarService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3gtbG9hZGluZy1iYXIvY29yZS9sb2FkaW5nLWJhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBb0IsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUc1RTtJQWNFLDJCQUMrQixVQUFrQixFQUNDLE1BQTZCO1FBRi9FLGlCQUdJO1FBRDhDLHVCQUFBLEVBQUEsV0FBNkI7UUFEaEQsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNDLFdBQU0sR0FBTixNQUFNLENBQXVCO1FBZnZFLFNBQUksR0FBc0MsRUFBRSxDQUFDO1FBQzdDLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQzlCLFdBQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FDakQsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLFNBQVMsQ0FBQyxjQUFNLE9BQUEsYUFBYSx3QkFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBbkIsQ0FBbUIsQ0FBQyxJQUF2RSxDQUF3RSxDQUFDLEVBQ3pGLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLElBQUksQ0FBQyxHQUFHLE9BQVIsSUFBSSxZQUFLLENBQUMsR0FBSyxDQUFDLElBQWhCLENBQWlCLENBQUMsQ0FDOUIsQ0FBQztJQVVDLENBQUM7SUFQSixzQkFBSSx3Q0FBUztRQURiLHdDQUF3QzthQUN4QztZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQU9ELHdDQUF3QztJQUN4QyxpQ0FBSyxHQUFMLFVBQU0sWUFBZ0I7UUFBaEIsNkJBQUEsRUFBQSxnQkFBZ0I7UUFDcEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsd0NBQXdDO0lBQ3hDLCtCQUFHLEdBQUgsVUFBSSxLQUFhO1FBQ2YsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsd0NBQXdDO0lBQ3hDLHFDQUFTLEdBQVQsVUFBVSxLQUFjO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELHdDQUF3QztJQUN4QyxvQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCx3Q0FBd0M7SUFDeEMsZ0NBQUksR0FBSjtRQUNFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsa0NBQU0sR0FBTixVQUFPLEVBQXNCO1FBQXRCLG1CQUFBLEVBQUEsY0FBc0I7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVyQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3pCO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7Z0JBeEMwQyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVztnREFDbEIsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQkFBa0I7OztJQWhCN0IsaUJBQWlCLGVBQ2xCLFNBRlgsVUFBVSxDQUFDLEVBQUUsVUFBVSxoQ0FDaEIsQ0FlSCxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQWhCRSxNQUFNLEVBQUUsQ0FBQyxEQWlCOUIsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7eUNBREUsTUFBTTtPQWZ0QyxpQkFBaUIsQ0F3RDdCOzs7Ozs7Ozs7Ozs7O2tDQUNEOzRCQWxFQTtDQWlFQyxBQXhERCxJQXdEQztTQXhEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IExvYWRpbmdCYXJTdGF0ZSB9IGZyb20gJy4vbG9hZGluZy1iYXIuc3RhdGUnO1xuaW1wb3J0IHsgU3ViamVjdCwgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IExPQURJTkdfQkFSX0NPTkZJRywgTG9hZGluZ0JhckNvbmZpZyB9IGZyb20gJy4vbG9hZGluZy1iYXIuY29uZmlnJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nQmFyU2VydmljZSB7XG4gIHByaXZhdGUgcmVmczogeyBbaWQ6IHN0cmluZ106IExvYWRpbmdCYXJTdGF0ZSB9ID0ge307XG4gIHByaXZhdGUgc3RyZWFtcyQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICByZWFkb25seSB2YWx1ZSQgPSB0aGlzLnN0cmVhbXMkLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXG4gICAgc3RhcnRXaXRoKG51bGwpLFxuICAgIHN3aXRjaE1hcCgoKSA9PiBjb21iaW5lTGF0ZXN0KC4uLk9iamVjdC5rZXlzKHRoaXMucmVmcykubWFwKChzKSA9PiB0aGlzLnJlZnNbc10udmFsdWUkKSkpLFxuICAgIG1hcCgodikgPT4gTWF0aC5tYXgoMCwgLi4udikpLFxuICApO1xuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHZhbHVlJGAgaW5zdGVhZC4gKi9cbiAgZ2V0IHByb2dyZXNzJCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KExPQURJTkdfQkFSX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IExvYWRpbmdCYXJDb25maWcgPSB7fSxcbiAgKSB7fVxuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHVzZVJlZmAgaW5zdGVhZC4gKi9cbiAgc3RhcnQoaW5pdGlhbFZhbHVlID0gMikge1xuICAgIHRoaXMudXNlUmVmKCkuc3RhcnQoaW5pdGlhbFZhbHVlKTtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHVzZVJlZmAgaW5zdGVhZC4gKi9cbiAgc2V0KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLnVzZVJlZigpLnNldCh2YWx1ZSk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIGluY3JlbWVudCh2YWx1ZT86IG51bWJlcikge1xuICAgIHRoaXMudXNlUmVmKCkuaW5jcmVtZW50KHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHVzZVJlZmAgaW5zdGVhZC4gKi9cbiAgY29tcGxldGUoKSB7XG4gICAgdGhpcy51c2VSZWYoKS5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBgdXNlUmVmYCBpbnN0ZWFkLiAqL1xuICBzdG9wKCkge1xuICAgIHRoaXMudXNlUmVmKCkuc3RvcCgpO1xuICB9XG5cbiAgdXNlUmVmKGlkOiBzdHJpbmcgPSAnZGVmYXVsdCcpOiBMb2FkaW5nQmFyU3RhdGUge1xuICAgIGlmICghdGhpcy5yZWZzW2lkXSkge1xuICAgICAgdGhpcy5yZWZzW2lkXSA9IG5ldyBMb2FkaW5nQmFyU3RhdGUodGhpcy5jb25maWcpO1xuICAgICAgdGhpcy5zdHJlYW1zJC5uZXh0KCk7XG5cbiAgICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgICB0aGlzLnJlZnNbaWRdLmRpc2FibGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZWZzW2lkXTtcbiAgfVxufVxuIl19