import { __decorate } from "tslib";
import { LoadingBarModule } from '@ngx-loading-bar/core';
import { NgModule } from '@angular/core';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { LoadingBarInterceptor } from './loading-bar.interceptor';
import * as ɵngcc0 from '@angular/core';
let LoadingBarHttpClientModule = class LoadingBarHttpClientModule {
};
LoadingBarHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoadingBarHttpClientModule });
LoadingBarHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoadingBarHttpClientModule_Factory(t) { return new (t || LoadingBarHttpClientModule)(); }, providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: LoadingBarInterceptor,
            multi: true
        },
    ], imports: [[HttpClientModule, LoadingBarModule],
        HttpClientModule, LoadingBarModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarHttpClientModule, { imports: function () { return [HttpClientModule, LoadingBarModule]; }, exports: function () { return [HttpClientModule, LoadingBarModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarHttpClientModule, [{
        type: NgModule,
        args: [{
                imports: [HttpClientModule, LoadingBarModule],
                exports: [HttpClientModule, LoadingBarModule],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: LoadingBarInterceptor,
                        multi: true
                    },
                ]
            }]
    }], null, null); })();
export { LoadingBarHttpClientModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9Abmd4LWxvYWRpbmctYmFyL2h0dHAtY2xpZW50L2h0dHAubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDOztBQWFsRSxJQUFhLDBCQUEwQixHQUF2QyxNQUFhLDBCQUEwQjtDQUFHOzs7Ozs7Ozs7RUFBQSxDQUE3QiwwQkFBMEI7Q0FYdEMsUUFBUSxDQUFDLFVBQ1IsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsVUFDN0MsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsVUFDN0MsU0FBUyxFQUFFLGNBQ1Qsa0JBQ0UsT0FBTyxFQUFFLGlCQUFpQixrQkFDMUIsUUFBUSxFQUFFLHFCQUFxQixrQkFDL0IsS0FBSztBQUFFLElBQUksZUFDWixXQUNGLE9BQ0YsQ0FBQyxJQUNXLDBCQUEwQixDQUFHOzs7Ozs7Ozs7Ozs7OzBCQUMxQztTQURhLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvYWRpbmdCYXJNb2R1bGUgfSBmcm9tICdAbmd4LWxvYWRpbmctYmFyL2NvcmUnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUsIEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTG9hZGluZ0JhckludGVyY2VwdG9yIH0gZnJvbSAnLi9sb2FkaW5nLWJhci5pbnRlcmNlcHRvcic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtIdHRwQ2xpZW50TW9kdWxlLCBMb2FkaW5nQmFyTW9kdWxlXSxcbiAgZXhwb3J0czogW0h0dHBDbGllbnRNb2R1bGUsIExvYWRpbmdCYXJNb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgIHVzZUNsYXNzOiBMb2FkaW5nQmFySW50ZXJjZXB0b3IsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nQmFySHR0cENsaWVudE1vZHVsZSB7fVxuIl19