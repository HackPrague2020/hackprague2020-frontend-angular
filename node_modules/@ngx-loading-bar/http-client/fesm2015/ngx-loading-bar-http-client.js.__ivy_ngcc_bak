import { __decorate, __metadata } from 'tslib';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { tap, finalize } from 'rxjs/operators';

let LoadingBarInterceptor = class LoadingBarInterceptor {
    constructor(loader) {
        this.loader = loader;
    }
    intercept(req, next) {
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        let started = false;
        const ref = this.loader.useRef('http');
        return next.handle(req).pipe(tap(() => {
            if (!started) {
                ref.start();
                started = true;
            }
        }), finalize(() => started && ref.complete()));
    }
};
LoadingBarInterceptor.ctorParameters = () => [
    { type: LoadingBarService }
];
LoadingBarInterceptor = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [LoadingBarService])
], LoadingBarInterceptor);

let LoadingBarHttpClientModule = class LoadingBarHttpClientModule {
};
LoadingBarHttpClientModule = __decorate([
    NgModule({
        imports: [HttpClientModule, LoadingBarModule],
        exports: [HttpClientModule, LoadingBarModule],
        providers: [
            {
                provide: HTTP_INTERCEPTORS,
                useClass: LoadingBarInterceptor,
                multi: true,
            },
        ],
    })
], LoadingBarHttpClientModule);

/**
 * Generated bundle index. Do not edit.
 */

export { LoadingBarHttpClientModule, LoadingBarInterceptor as Éµa };
//# sourceMappingURL=ngx-loading-bar-http-client.js.map
