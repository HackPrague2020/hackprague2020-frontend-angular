import { DoCheck, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Color } from './color';
import { ThemeService } from './theme.service';
import { ChartConfiguration, ChartDataSets, ChartOptions, ChartPoint, ChartType, PluginServiceGlobalRegistration, PluginServiceRegistrationOptions } from 'chart.js';
import * as ɵngcc0 from '@angular/core';
export declare type SingleDataSet = Array<number | null | undefined | number[]> | ChartPoint[];
export declare type MultiDataSet = SingleDataSet[];
export declare type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;
export declare type PluginServiceGlobalRegistrationAndOptions = PluginServiceGlobalRegistration & PluginServiceRegistrationOptions;
export declare type SingleLineLabel = string;
export declare type MultiLineLabel = string[];
export declare type Label = SingleLineLabel | MultiLineLabel;
export declare class BaseChartDirective implements OnChanges, OnInit, OnDestroy, DoCheck {
    private element;
    private themeService;
    data: SingleOrMultiDataSet;
    datasets: ChartDataSets[];
    labels: Label[];
    options: ChartOptions;
    chartType: ChartType;
    colors: Color[];
    legend: boolean;
    plugins: PluginServiceGlobalRegistrationAndOptions[];
    chartClick: EventEmitter<{
        event?: MouseEvent;
        active?: {}[];
    }>;
    chartHover: EventEmitter<{
        event: MouseEvent;
        active: {}[];
    }>;
    ctx: string;
    chart: Chart;
    private old;
    private subs;
    /**
     * Register a plugin.
     */
    static registerPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    static unregisterPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    constructor(element: ElementRef, themeService: ThemeService);
    ngOnInit(): void;
    private themeChanged;
    ngDoCheck(): void;
    copyLabel(a: Label): Label;
    labelsEqual(a: Label, b: Label): boolean;
    copyColor(a: Color): Color;
    colorsEqual(a: Color, b: Color): boolean;
    updateColors(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    update(duration?: any): {};
    hideDataset(index: number, hidden: boolean): void;
    isDatasetHidden(index: number): boolean;
    toBase64Image(): string;
    getChartConfiguration(): ChartConfiguration;
    getChartBuilder(ctx: string): Chart;
    smartMerge(options: any, overrides: any, level?: number): any;
    private isMultiLineLabel;
    private joinLabel;
    private propagateDatasetsToData;
    private propagateDataToDatasets;
    private isMultiDataSet;
    private getDatasets;
    private refresh;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseChartDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseChartDirective, "canvas[baseChart]", ["base-chart"], {
    "options": "options";
    "data": "data";
    "datasets": "datasets";
    "labels": "labels";
    "chartType": "chartType";
    "colors": "colors";
    "legend": "legend";
    "plugins": "plugins";
}, {
    "chartClick": "chartClick";
    "chartHover": "chartHover";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb0NoZWNrLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuL2NvbG9yJztcclxuaW1wb3J0IHsgVGhlbWVTZXJ2aWNlIH0gZnJvbSAnLi90aGVtZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydERhdGFTZXRzLCBDaGFydE9wdGlvbnMsIENoYXJ0UG9pbnQsIENoYXJ0VHlwZSwgUGx1Z2luU2VydmljZUdsb2JhbFJlZ2lzdHJhdGlvbiwgUGx1Z2luU2VydmljZVJlZ2lzdHJhdGlvbk9wdGlvbnMgfSBmcm9tICdjaGFydC5qcyc7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgU2luZ2xlRGF0YVNldCA9IEFycmF5PG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQgfCBudW1iZXJbXT4gfCBDaGFydFBvaW50W107XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTXVsdGlEYXRhU2V0ID0gU2luZ2xlRGF0YVNldFtdO1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIFNpbmdsZU9yTXVsdGlEYXRhU2V0ID0gU2luZ2xlRGF0YVNldCB8IE11bHRpRGF0YVNldDtcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBQbHVnaW5TZXJ2aWNlR2xvYmFsUmVnaXN0cmF0aW9uQW5kT3B0aW9ucyA9IFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb24gJiBQbHVnaW5TZXJ2aWNlUmVnaXN0cmF0aW9uT3B0aW9ucztcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBTaW5nbGVMaW5lTGFiZWwgPSBzdHJpbmc7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTXVsdGlMaW5lTGFiZWwgPSBzdHJpbmdbXTtcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBMYWJlbCA9IFNpbmdsZUxpbmVMYWJlbCB8IE11bHRpTGluZUxhYmVsO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCYXNlQ2hhcnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95LCBEb0NoZWNrIHtcclxuICAgIHByaXZhdGUgZWxlbWVudDtcclxuICAgIHByaXZhdGUgdGhlbWVTZXJ2aWNlO1xyXG4gICAgZGF0YTogU2luZ2xlT3JNdWx0aURhdGFTZXQ7XHJcbiAgICBkYXRhc2V0czogQ2hhcnREYXRhU2V0c1tdO1xyXG4gICAgbGFiZWxzOiBMYWJlbFtdO1xyXG4gICAgb3B0aW9uczogQ2hhcnRPcHRpb25zO1xyXG4gICAgY2hhcnRUeXBlOiBDaGFydFR5cGU7XHJcbiAgICBjb2xvcnM6IENvbG9yW107XHJcbiAgICBsZWdlbmQ6IGJvb2xlYW47XHJcbiAgICBwbHVnaW5zOiBQbHVnaW5TZXJ2aWNlR2xvYmFsUmVnaXN0cmF0aW9uQW5kT3B0aW9uc1tdO1xyXG4gICAgY2hhcnRDbGljazogRXZlbnRFbWl0dGVyPHtcclxuICAgICAgICBldmVudD86IE1vdXNlRXZlbnQ7XHJcbiAgICAgICAgYWN0aXZlPzoge31bXTtcclxuICAgIH0+O1xyXG4gICAgY2hhcnRIb3ZlcjogRXZlbnRFbWl0dGVyPHtcclxuICAgICAgICBldmVudDogTW91c2VFdmVudDtcclxuICAgICAgICBhY3RpdmU6IHt9W107XHJcbiAgICB9PjtcclxuICAgIGN0eDogc3RyaW5nO1xyXG4gICAgY2hhcnQ6IENoYXJ0O1xyXG4gICAgcHJpdmF0ZSBvbGQ7XHJcbiAgICBwcml2YXRlIHN1YnM7XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmVnaXN0ZXJQbHVnaW4ocGx1Z2luOiBQbHVnaW5TZXJ2aWNlR2xvYmFsUmVnaXN0cmF0aW9uQW5kT3B0aW9ucyk6IHZvaWQ7XHJcbiAgICBzdGF0aWMgdW5yZWdpc3RlclBsdWdpbihwbHVnaW46IFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb25BbmRPcHRpb25zKTogdm9pZDtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHRoZW1lU2VydmljZTogVGhlbWVTZXJ2aWNlKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHRoZW1lQ2hhbmdlZDtcclxuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xyXG4gICAgY29weUxhYmVsKGE6IExhYmVsKTogTGFiZWw7XHJcbiAgICBsYWJlbHNFcXVhbChhOiBMYWJlbCwgYjogTGFiZWwpOiBib29sZWFuO1xyXG4gICAgY29weUNvbG9yKGE6IENvbG9yKTogQ29sb3I7XHJcbiAgICBjb2xvcnNFcXVhbChhOiBDb2xvciwgYjogQ29sb3IpOiBib29sZWFuO1xyXG4gICAgdXBkYXRlQ29sb3JzKCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICB1cGRhdGUoZHVyYXRpb24/OiBhbnkpOiB7fTtcclxuICAgIGhpZGVEYXRhc2V0KGluZGV4OiBudW1iZXIsIGhpZGRlbjogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBpc0RhdGFzZXRIaWRkZW4oaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICB0b0Jhc2U2NEltYWdlKCk6IHN0cmluZztcclxuICAgIGdldENoYXJ0Q29uZmlndXJhdGlvbigpOiBDaGFydENvbmZpZ3VyYXRpb247XHJcbiAgICBnZXRDaGFydEJ1aWxkZXIoY3R4OiBzdHJpbmcpOiBDaGFydDtcclxuICAgIHNtYXJ0TWVyZ2Uob3B0aW9uczogYW55LCBvdmVycmlkZXM6IGFueSwgbGV2ZWw/OiBudW1iZXIpOiBhbnk7XHJcbiAgICBwcml2YXRlIGlzTXVsdGlMaW5lTGFiZWw7XHJcbiAgICBwcml2YXRlIGpvaW5MYWJlbDtcclxuICAgIHByaXZhdGUgcHJvcGFnYXRlRGF0YXNldHNUb0RhdGE7XHJcbiAgICBwcml2YXRlIHByb3BhZ2F0ZURhdGFUb0RhdGFzZXRzO1xyXG4gICAgcHJpdmF0ZSBpc011bHRpRGF0YVNldDtcclxuICAgIHByaXZhdGUgZ2V0RGF0YXNldHM7XHJcbiAgICBwcml2YXRlIHJlZnJlc2g7XHJcbn1cclxuIl19